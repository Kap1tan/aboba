import os
import tempfile
import logging

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command

from config import ADMIN_IDS, GIFT_EMOJIS, GIFT_NAMES
from keyboards import (
    create_admin_keyboard,
    create_back_to_admin_keyboard
)
from utils import is_admin, load_json_data, save_json_data

admin_router = Router()

def get_global_roulette_stats(roulette_stats):
    """–°–æ–±–∏—Ä–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—É–ª–µ—Ç–∫–∏"""
    total_spins = 0
    total_spent = 0
    total_won = 0
    total_gifts = {}

    for user_id, stats in roulette_stats.items():
        total_spins += stats.get("total_spins", 0)
        total_spent += stats.get("total_spent", 0)
        total_won += stats.get("total_won", 0)

        # –°—É–º–º–∏—Ä—É–µ–º –ø–æ–¥–∞—Ä–∫–∏
        for gift, count in stats.get("gifts", {}).items():
            if gift not in total_gifts:
                total_gifts[gift] = 0
            total_gifts[gift] += count

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    gifts_text = ""
    for gift, count in sorted(total_gifts.items(), key=lambda x: x[1], reverse=True):
        emoji = GIFT_EMOJIS.get(gift, "üéÅ")
        name = GIFT_NAMES.get(gift, "–ü–æ–¥–∞—Ä–æ–∫")
        gifts_text += f"{emoji} {name}: {count} —à—Ç.\n"

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    profit = total_spent - total_won
    profit_percentage = (profit / total_spent * 100) if total_spent > 0 else 0

    stats_text = (
        f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä—É–ª–µ—Ç–∫–∏:\n\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–∫—Ä—É—Ç–æ–≤: {total_spins}\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥: {total_spent}\n"
        f"–í—ã–¥–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞: {total_won} –∑–≤–µ–∑–¥\n"
        f"–ü—Ä–∏–±—ã–ª—å: {profit} –∑–≤–µ–∑–¥ ({profit_percentage:.2f}%)\n\n"
        f"–í—ã–¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏:\n{gifts_text}"
    )

    return stats_text

@admin_router.message(Command(commands="admin"))
async def cmd_admin(message: Message):
    """Admin panel command handler."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ initial_data
    users_data = message.bot.initial_data['users_data']

    total_users = len(users_data)
    active_users = sum(1 for u in users_data.values() if u.get("status") == "active")
    removed_users = sum(1 for u in users_data.values() if u.get("status") == "removed")

    admin_text = (
        "üìä <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>:\n\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{active_users}</b>\n"
        f"–£–¥–∞–ª–∏–ª–∏ –±–æ—Ç–∞: <b>{removed_users}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await message.answer(
        admin_text,
        reply_markup=create_admin_keyboard(),
        parse_mode="HTML"
    )

@admin_router.callback_query(F.data == "roulette_stats")
async def callback_roulette_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä—É–ª–µ—Ç–∫–∏ –∏–∑ initial_data
    roulette_stats = callback.bot.initial_data['roulette_stats']

    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = get_global_roulette_stats(roulette_stats)

    await callback.message.edit_text(
        stats_text,
        reply_markup=create_back_to_admin_keyboard()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "back_to_admin")
async def callback_back_to_admin(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    await cmd_admin(callback.message)
    await callback.answer()

@admin_router.callback_query(F.data == "download_users")
async def callback_download_users(callback: CallbackQuery):
    """Download users data as a file."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ initial_data
    users_data = callback.bot.initial_data['users_data']

    lines = []
    for user_id, info in users_data.items():
        username = info.get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        status = info.get("status", "unknown")
        joined_at = info.get("joined_at", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        line = f"–ò–º—è: {username}, –°—Ç–∞—Ç—É—Å: {status}, ID: {user_id}, –î–∞—Ç–∞: {joined_at}"
        lines.append(line)

    text_content = "\n".join(lines) if lines else "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."

    with tempfile.NamedTemporaryFile(mode="w+", suffix=".txt", delete=False, encoding="utf-8") as tmp:
        tmp.write(text_content)
        tmp_path = tmp.name

    document = FSInputFile(tmp_path)
    await callback.bot.send_document(
        chat_id=callback.from_user.id,
        document=document,
        caption="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

    os.remove(tmp_path)
    await callback.answer()